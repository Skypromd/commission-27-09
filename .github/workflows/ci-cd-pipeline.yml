name: UK Commission Admin Panel - CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ created ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: uk-commission-admin-panel

jobs:
  # Code Quality Checks
  code-quality:
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          backend:
            - 'backend/**'
          frontend:
            - 'frontend/**'

    - name: Setup Python
      if: steps.changes.outputs.backend == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt

    - name: Setup Node.js
      if: steps.changes.outputs.frontend == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Python dependencies
      if: steps.changes.outputs.backend == 'true'
      run: |
        cd backend
        pip install -r requirements.txt
        pip install ruff black isort mypy

    - name: Install Node dependencies
      if: steps.changes.outputs.frontend == 'true'
      run: |
        cd frontend
        npm ci

    - name: Python code formatting check
      if: steps.changes.outputs.backend == 'true'
      run: |
        cd backend
        black --check --diff .
        isort --check-only --diff .

    - name: Python linting
      if: steps.changes.outputs.backend == 'true'
      run: |
        cd backend
        ruff check .

    - name: Python type checking
      if: steps.changes.outputs.backend == 'true'
      run: |
        cd backend
        mypy . --ignore-missing-imports

    - name: Frontend linting
      if: steps.changes.outputs.frontend == 'true'
      run: |
        cd frontend
        npm run lint
        npm run type-check

    - name: Frontend formatting check
      if: steps.changes.outputs.frontend == 'true'
      run: |
        cd frontend
        npm run format:check

  # Backend Testing
  backend-tests:
    runs-on: ubuntu-latest
    needs: code-quality
    if: needs.code-quality.outputs.backend-changed == 'true'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_commission_db
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt

    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio httpx faker

    - name: Run unit tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_commission_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci-only
        ENVIRONMENT: testing
      run: |
        cd backend
        pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_commission_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci-only
        ENVIRONMENT: testing
      run: |
        cd backend
        pytest tests/integration/ -v --cov-append --cov=app --cov-report=xml

    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        flags: backend
        name: backend-coverage

    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: backend-test-results
        path: |
          backend/htmlcov/
          backend/coverage.xml

  # Frontend Testing
  frontend-tests:
    runs-on: ubuntu-latest
    needs: code-quality
    if: needs.code-quality.outputs.frontend-changed == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Run unit tests
      run: |
        cd frontend
        npm run test:coverage

    - name: Run component tests
      run: |
        cd frontend
        npm run test:components

    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: frontend/coverage
        flags: frontend
        name: frontend-coverage

    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: frontend-test-results
        path: frontend/coverage/

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: always() && (needs.backend-tests.result == 'success' || needs.frontend-tests.result == 'success')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner (Backend)
      uses: aquasecurity/trivy-action@master
      if: needs.code-quality.outputs.backend-changed == 'true'
      with:
        scan-type: 'fs'
        scan-ref: 'backend/'
        format: 'sarif'
        output: 'trivy-backend-results.sarif'

    - name: Run Trivy vulnerability scanner (Frontend)
      uses: aquasecurity/trivy-action@master
      if: needs.code-quality.outputs.frontend-changed == 'true'
      with:
        scan-type: 'fs'
        scan-ref: 'frontend/'
        format: 'sarif'
        output: 'trivy-frontend-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: '.'

    - name: Run Bandit security linter (Python)
      if: needs.code-quality.outputs.backend-changed == 'true'
      run: |
        pip install bandit[toml]
        bandit -r backend/ -f json -o bandit-report.json || true

    - name: Run npm audit (Frontend)
      if: needs.code-quality.outputs.frontend-changed == 'true'
      run: |
        cd frontend
        npm audit --audit-level high --json > ../npm-audit-report.json || true

    - name: Upload security scan results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: |
          trivy-*-results.sarif
          bandit-report.json
          npm-audit-report.json

  # Build Docker Images
  build-images:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan]
    if: always() && github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Backend image
      if: needs.code-quality.outputs.backend-changed == 'true'
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ github.repository }}/backend:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Frontend image
      if: needs.code-quality.outputs.frontend-changed == 'true'
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ github.repository }}/frontend:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Performance Testing
  performance-tests:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.event_name == 'pull_request' && needs.build-images.result == 'success'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run API performance tests
      run: |
        cd tests/performance
        k6 run --out json=api-performance-results.json api-load-test.js

    - name: Run Frontend performance tests
      run: |
        cd tests/performance
        k6 run --out json=frontend-performance-results.json frontend-load-test.js

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-test-results
        path: tests/performance/*-results.json

  # E2E Testing
  e2e-tests:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.event_name == 'pull_request' && needs.build-images.result == 'success'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Playwright
      run: |
        npm install -g @playwright/test
        npx playwright install chromium firefox webkit

    - name: Start test environment
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30  # Wait for services to start

    - name: Run E2E tests
      run: |
        npx playwright test --reporter=html
      env:
        BASE_URL: http://localhost:3000
        API_URL: http://localhost:8000

    - name: Upload E2E test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: e2e-test-results
        path: |
          playwright-report/
          test-results/

    - name: Stop test environment
      if: always()
      run: docker-compose -f docker-compose.test.yml down

  # Code Quality Analysis
  sonarcloud:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: always() && (needs.backend-tests.result == 'success' || needs.frontend-tests.result == 'success')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: Download backend test results
      if: needs.backend-tests.result == 'success'
      uses: actions/download-artifact@v3
      with:
        name: backend-test-results
        path: backend/

    - name: Download frontend test results
      if: needs.frontend-tests.result == 'success'
      uses: actions/download-artifact@v3
      with:
        name: frontend-test-results
        path: frontend/

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Staging Deployment
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-images, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region eu-west-2 --name uk-commission-staging

    - name: Deploy to staging
      run: |
        kubectl set image deployment/backend-deployment backend=${{ env.REGISTRY }}/${{ github.repository }}/backend:develop -n staging
        kubectl set image deployment/frontend-deployment frontend=${{ env.REGISTRY }}/${{ github.repository }}/frontend:develop -n staging
        kubectl rollout status deployment/backend-deployment -n staging
        kubectl rollout status deployment/frontend-deployment -n staging

    - name: Run smoke tests
      run: |
        cd tests/smoke
        npm install
        npm run test:staging

    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        message: '🚀 Staging deployment successful for ${{ github.sha }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Production Deployment
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-images, security-scan, e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region eu-west-2 --name uk-commission-production

    - name: Blue-Green Deployment
      run: |
        # Create new deployment with green label
        kubectl patch deployment backend-deployment -p '{"metadata":{"labels":{"version":"green"}},"spec":{"template":{"metadata":{"labels":{"version":"green"}},"spec":{"containers":[{"name":"backend","image":"${{ env.REGISTRY }}/${{ github.repository }}/backend:latest"}]}}}}' -n production
        kubectl patch deployment frontend-deployment -p '{"metadata":{"labels":{"version":"green"}},"spec":{"template":{"metadata":{"labels":{"version":"green"}},"spec":{"containers":[{"name":"frontend","image":"${{ env.REGISTRY }}/${{ github.repository }}/frontend:latest"}]}}}}' -n production

        # Wait for rollout
        kubectl rollout status deployment/backend-deployment -n production --timeout=600s
        kubectl rollout status deployment/frontend-deployment -n production --timeout=600s

    - name: Run production smoke tests
      run: |
        cd tests/smoke
        npm install
        npm run test:production

    - name: Switch traffic to green
      if: success()
      run: |
        kubectl patch service backend-service -p '{"spec":{"selector":{"version":"green"}}}' -n production
        kubectl patch service frontend-service -p '{"spec":{"selector":{"version":"green"}}}' -n production

    - name: Clean up old deployment
      if: success()
      run: |
        kubectl delete deployment -l version=blue -n production || true

    - name: Rollback on failure
      if: failure()
      run: |
        kubectl patch service backend-service -p '{"spec":{"selector":{"version":"blue"}}}' -n production
        kubectl patch service frontend-service -p '{"spec":{"selector":{"version":"blue"}}}' -n production
        kubectl delete deployment -l version=green -n production || true

    - name: Notify deployment result
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        message: |
          Production deployment ${{ job.status }} for ${{ github.sha }}
          Commit: ${{ github.event.head_commit.message }}
          Author: ${{ github.event.head_commit.author.name }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Cleanup and reporting
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
    - name: Generate deployment report
      run: |
        echo "# Deployment Report" > deployment-report.md
        echo "- **Commit:** ${{ github.sha }}" >> deployment-report.md
        echo "- **Branch:** ${{ github.ref_name }}" >> deployment-report.md
        echo "- **Staging:** ${{ needs.deploy-staging.result }}" >> deployment-report.md
        echo "- **Production:** ${{ needs.deploy-production.result }}" >> deployment-report.md
        echo "- **Timestamp:** $(date -u)" >> deployment-report.md

    - name: Archive deployment report
      uses: actions/upload-artifact@v3
      with:
        name: deployment-report
        path: deployment-report.md

    - name: Clean up old artifacts
      run: |
        echo "Cleanup completed"

  # Security monitoring post-deployment
  security-monitoring:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: needs.deploy-production.result == 'success'

    steps:
    - name: Run OWASP ZAP scan
      uses: zaproxy/action-full-scan@v0.7.0
      with:
        target: 'https://uk-commission-panel.com'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

    - name: Upload ZAP scan results
      uses: actions/upload-artifact@v3
      with:
        name: zap-scan-results
        path: report_html.html
