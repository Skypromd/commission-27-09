#!/usr/bin/env python3
"""
UK Commission Admin Panel - Universal Setup Script
–ö—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º
"""

import os
import sys
import subprocess
import platform
import json
import shutil
from pathlib import Path
from typing import List, Dict, Optional

class ProjectManager:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞"""

    def __init__(self):
        self.root_dir = Path(__file__).parent
        self.backend_dir = self.root_dir / "backend"
        self.frontend_dir = self.root_dir / "frontend"
        self.system = platform.system().lower()
        self.python_cmd = self._get_python_cmd()
        self._npm_cmd = None

    def _get_python_cmd(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É Python –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        for cmd in ['python3', 'python', 'py']:
            try:
                result = subprocess.run([cmd, '--version'],
                                        capture_output=True, text=True)
                if result.returncode == 0 and '3.' in result.stdout:
                    return cmd
            except FileNotFoundError:
                continue
        raise RuntimeError("Python 3 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")

    @property
    def npm_cmd(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É npm/yarn –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏."""
        if self._npm_cmd is None:
            for cmd in ['npm', 'yarn']:
                try:
                    subprocess.run([cmd, '--version'],
                                   capture_output=True, check=True)
                    self._npm_cmd = cmd
                    return self._npm_cmd
                except (FileNotFoundError, subprocess.CalledProcessError):
                    continue
            raise RuntimeError("npm –∏–ª–∏ yarn –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å frontend.")
        return self._npm_cmd

    def _run_command(self, cmd: List[str], cwd: Optional[Path] = None,
                     shell: bool = None) -> subprocess.CompletedProcess:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å —É—á–µ—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        if shell is None:
            shell = self.system == 'windows'

        print(f"üîß –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {' '.join(cmd)}")
        return subprocess.run(cmd, cwd=cwd, shell=shell, check=True)

    def setup_project(self):
        """–ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        print("üöÄ –ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Commission Tracker...")

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        self._check_system_requirements()

        # 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ backend
        self._setup_backend()

        # 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ frontend
        self._setup_frontend()

        # 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ git hooks
        self._setup_git_hooks()

        # 5. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        self._create_config_files()

        print("‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("  python setup-project.py start-backend  - –ó–∞–ø—É—Å–∫ backend")
        print("  python setup-project.py start-frontend - –ó–∞–ø—É—Å–∫ frontend")
        print("  python setup-project.py start-full     - –ó–∞–ø—É—Å–∫ –≤—Å–µ–≥–æ —Å—Ç–µ–∫–∞")
        print("  python setup-project.py test           - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤")

    def _check_system_requirements(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")

        requirements = {
            'Python 3.8+': self.python_cmd,
            'Node.js 16+': 'node',
            'npm/yarn': self.npm_cmd
        }

        for name, cmd in requirements.items():
            try:
                # –î–ª—è npm/yarn –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–µ—Ç –≤–Ω—É—Ç—Ä–∏ —Å–≤–æ–π—Å—Ç–≤–∞
                if name == 'npm/yarn':
                    command_to_run = [cmd, '--version']
                else:
                    command_to_run = [cmd, '--version']

                result = subprocess.run(command_to_run,
                                        capture_output=True, text=True, check=True, shell=self.system=='windows')
                version = result.stdout.strip()
                print(f"  ‚úÖ {name}: {version}")

            except (subprocess.CalledProcessError, FileNotFoundError) as e:
                print(f"  ‚ùå {name}: –ù–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. ({str(e)})")
                sys.exit(1)
            except Exception as e:
                print(f"  ‚ùå {name}: {str(e)}")
                sys.exit(1)


    def _setup_backend(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ backend environment"""
        print("üêç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python backend...")

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        venv_path = self.backend_dir / ".venv"
        if not venv_path.exists():
            self._run_command([self.python_cmd, '-m', 'venv', str(venv_path)])

        # –ê–∫—Ç–∏–≤–∞—Ü–∏—è venv –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        if self.system == 'windows':
            pip_cmd = str(venv_path / "Scripts" / "pip")
        else:
            pip_cmd = str(venv_path / "bin" / "pip")

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        requirements_file = self.backend_dir / "requirements.txt"
        if requirements_file.exists():
            self._run_command([pip_cmd, 'install', '-r', str(requirements_file)])

        # –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        env_file = self.backend_dir / ".env"
        if not env_file.exists():
            env_content = """# UK Commission Admin Panel - Environment Configuration
DATABASE_URL=sqlite:///./sql_app.db
SECRET_KEY=your-secret-key-here-change-in-production
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30
CORS_ORIGINS=["http://localhost:3000"]
DEBUG=True
"""
            env_file.write_text(env_content)

    def _setup_frontend(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ frontend environment"""
        print("‚öõÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ React frontend...")

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        package_json = self.frontend_dir / "package.json"
        if package_json.exists():
            self._run_command([self.npm_cmd, 'install'], cwd=self.frontend_dir)

        # –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –¥–ª—è frontend
        env_file = self.frontend_dir / ".env"
        if not env_file.exists():
            env_content = """# Frontend Environment Variables
REACT_APP_API_URL=http://localhost:8000
REACT_APP_VERSION=1.0.0
REACT_APP_ENVIRONMENT=development
GENERATE_SOURCEMAP=true
"""
            env_file.write_text(env_content)

    def _setup_git_hooks(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ git hooks –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"""
        print("üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ git hooks...")

        git_dir = self.root_dir / ".git"
        if not git_dir.exists():
            print("  ‚ö†Ô∏è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return

        hooks_dir = git_dir / "hooks"
        hooks_dir.mkdir(exist_ok=True)

        # Pre-commit hook
        pre_commit_hook = hooks_dir / "pre-commit"
        pre_commit_content = f"""#!/bin/bash
# UK Commission Admin Panel - Pre-commit Hook

echo "üîç –ó–∞–ø—É—Å–∫ pre-commit –ø—Ä–æ–≤–µ—Ä–æ–∫..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –∫–æ–¥–∞
echo "üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –∫–æ–¥–∞..."
cd backend
if command -v ruff &> /dev/null; then
    ruff check .
    if [ $? -ne 0 ]; then
        echo "‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ Python –∫–æ–¥–µ"
        exit 1
    fi
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend –∫–æ–¥–∞  
echo "‚öõÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ React –∫–æ–¥–∞..."
cd ../frontend
if command -v npm &> /dev/null; then
    npm run lint --silent
    if [ $? -ne 0 ]; then
        echo "‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ React –∫–æ–¥–µ"
        exit 1
    fi
fi

echo "‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!"
exit 0
"""
        pre_commit_hook.write_text(pre_commit_content)
        pre_commit_hook.chmod(0o755)

    def _create_config_files(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        print("üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")

        # Docker Compose –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        docker_compose = self.root_dir / "docker-compose.dev.yml"
        docker_compose_content = """version: '3.8'

services:
  backend:
    build: ./backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    environment:
      - DATABASE_URL=sqlite:///./sql_app.db
      - DEBUG=True
    depends_on:
      - redis
      - postgres

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    depends_on:
      - backend

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: commission_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data:
"""
        docker_compose.write_text(docker_compose_content)

        # Makefile –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        makefile = self.root_dir / "Makefile"
        makefile_content = """# UK Commission Admin Panel - Makefile

.PHONY: setup start-backend start-frontend start-full test clean build

setup:
	python setup-project.py setup

start-backend:
	python setup-project.py start-backend

start-frontend:
	python setup-project.py start-frontend

start-full:
	python setup-project.py start-full

test:
	python setup-project.py test

clean:
	python setup-project.py clean

build:
	python setup-project.py build

docker-dev:
	docker-compose -f docker-compose.dev.yml up --build

docker-prod:
	docker-compose -f docker-compose.yml up --build

lint:
	cd backend && ruff check .
	cd frontend && npm run lint

format:
	cd backend && ruff format .
	cd frontend && npm run format
"""
        makefile.write_text(makefile_content)

    def start_backend(self):
        """–ó–∞–ø—É—Å–∫ backend —Å–µ—Ä–≤–µ—Ä–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ backend —Å–µ—Ä–≤–µ—Ä–∞...")

        venv_path = self.backend_dir / ".venv"
        if self.system == 'windows':
            python_venv = str(venv_path / "Scripts" / "python")
        else:
            python_venv = str(venv_path / "bin" / "python")

        # –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞
        self._run_command([
            python_venv, '-m', 'uvicorn',
            'app.main:app',
            '--reload',
            '--host', '0.0.0.0',
            '--port', '8000'
        ], cwd=self.backend_dir)

    def start_frontend(self):
        """–ó–∞–ø—É—Å–∫ frontend —Å–µ—Ä–≤–µ—Ä–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ frontend —Å–µ—Ä–≤–µ—Ä–∞...")
        self._run_command([self.npm_cmd, 'start'], cwd=self.frontend_dir)

    def start_full(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–µ–∫–∞ —á–µ—Ä–µ–∑ Docker Compose"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–µ–∫–∞...")
        self._run_command(['docker-compose', '-f', 'docker-compose.dev.yml', 'up', '--build'])

    def test(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...")

        # Backend —Ç–µ—Å—Ç—ã
        print("üêç –¢–µ—Å—Ç—ã backend...")
        try:
            self._run_command([self.python_cmd, '-m', 'pytest', 'tests/'],
                              cwd=self.backend_dir)
        except subprocess.CalledProcessError:
            print("‚ö†Ô∏è Backend —Ç–µ—Å—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π")

        # Frontend —Ç–µ—Å—Ç—ã
        print("‚öõÔ∏è –¢–µ—Å—Ç—ã frontend...")
        try:
            self._run_command([self.npm_cmd, 'test', '--watchAll=false'],
                              cwd=self.frontend_dir)
        except subprocess.CalledProcessError:
            print("‚ö†Ô∏è Frontend —Ç–µ—Å—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π")

    def clean(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        print("üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...")

        # –û—á–∏—Å—Ç–∫–∞ Python –∫—ç—à–∞
        for cache_dir in self.root_dir.rglob("__pycache__"):
            shutil.rmtree(cache_dir, ignore_errors=True)

        for pyc_file in self.root_dir.rglob("*.pyc"):
            pyc_file.unlink(missing_ok=True)

        # –û—á–∏—Å—Ç–∫–∞ node_modules –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        node_modules = self.frontend_dir / "node_modules"
        if node_modules.exists():
            answer = input("–£–¥–∞–ª–∏—Ç—å node_modules? (y/N): ")
            if answer.lower() == 'y':
                shutil.rmtree(node_modules)

        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    def build(self):
        """–°–±–æ—Ä–∫–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω –≤–µ—Ä—Å–∏–∏"""
        print("üèóÔ∏è –°–±–æ—Ä–∫–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω –≤–µ—Ä—Å–∏–∏...")

        # –°–±–æ—Ä–∫–∞ frontend
        self._run_command([self.npm_cmd, 'run', 'build'], cwd=self.frontend_dir)

        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏–∫–∏ –≤ backend
        build_dir = self.frontend_dir / "build"
        static_dir = self.backend_dir / "static"

        if build_dir.exists():
            if static_dir.exists():
                shutil.rmtree(static_dir)
            shutil.copytree(build_dir, static_dir)

        print("‚úÖ –ü—Ä–æ–¥–∞–∫—à–µ–Ω —Å–±–æ—Ä–∫–∞ –≥–æ—Ç–æ–≤–∞")

    def status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞"""
        print("üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ Commission Tracker")
        print("=" * 50)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        dirs = {
            'Backend': self.backend_dir,
            'Frontend': self.frontend_dir,
            'Backend venv': self.backend_dir / '.venv',
            'Frontend node_modules': self.frontend_dir / 'node_modules'
        }

        for name, path in dirs.items():
            status = "‚úÖ" if path.exists() else "‚ùå"
            print(f"{status} {name}: {path}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        configs = {
            'Backend .env': self.backend_dir / '.env',
            'Frontend .env': self.frontend_dir / '.env',
            'Docker Compose': self.root_dir / 'docker-compose.dev.yml'
        }

        print("\nüìÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        for name, path in configs.items():
            status = "‚úÖ" if path.exists() else "‚ùå"
            print(f"{status} {name}: {path}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    manager = ProjectManager()

    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python setup-project.py <command>")
        print("–ö–æ–º–∞–Ω–¥—ã:")
        print("  setup         - –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
        print("  start-backend - –ó–∞–ø—É—Å–∫ backend")
        print("  start-frontend- –ó–∞–ø—É—Å–∫ frontend")
        print("  start-full    - –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–µ–∫–∞")
        print("  test          - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤")
        print("  clean         - –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞")
        print("  build         - –°–±–æ—Ä–∫–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω –≤–µ—Ä—Å–∏–∏")
        print("  status        - –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞")
        return

    command = sys.argv[1]

    try:
        if command == 'setup':
            manager.setup_project()
        elif command == 'start-backend':
            manager.start_backend()
        elif command == 'start-frontend':
            manager.start_frontend()
        elif command == 'start-full':
            manager.start_full()
        elif command == 'test':
            manager.test()
        elif command == 'clean':
            manager.clean()
        elif command == 'build':
            manager.build()
        elif command == 'status':
            manager.status()
        else:
            print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()
