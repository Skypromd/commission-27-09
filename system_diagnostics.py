#!/usr/bin/env python3
"""
UK Financial Services - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import requests
import json
import subprocess
import time
from pathlib import Path
import socket

class SystemDiagnostics:
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.backend_url = "http://localhost:8000"
        self.frontend_url = "http://localhost:5173"
        self.results = {
            "backend": {"status": "unknown", "details": {}},
            "frontend": {"status": "unknown", "details": {}},
            "database": {"status": "unknown", "details": {}},
            "ports": {"status": "unknown", "details": {}},
            "files": {"status": "unknown", "details": {}}
        }

    def check_port(self, port, service_name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞"""
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)
            result = sock.connect_ex(('localhost', port))
            sock.close()

            if result == 0:
                print(f"‚úÖ {service_name} –ø–æ—Ä—Ç {port} - –ê–ö–¢–ò–í–ï–ù")
                return True
            else:
                print(f"‚ùå {service_name} –ø–æ—Ä—Ç {port} - –ù–ï –î–û–°–¢–£–ü–ï–ù")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞ {port}: {e}")
            return False

    def check_backend_api(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Backend API"""
        print("\nüîç –ü–†–û–í–ï–†–ö–ê BACKEND API")
        print("-" * 30)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞
        port_active = self.check_port(8000, "Backend API")
        self.results["ports"]["backend"] = port_active

        if not port_active:
            self.results["backend"]["status"] = "not_running"
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö endpoints
        endpoints = [
            "/",
            "/health",
            "/docs",
            "/api/v1/clients",
            "/api/v1/commissions"
        ]

        working_endpoints = []
        for endpoint in endpoints:
            try:
                response = requests.get(f"{self.backend_url}{endpoint}", timeout=5)
                if response.status_code in [200, 404]:  # 404 —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö endpoints
                    print(f"‚úÖ {endpoint} - OK ({response.status_code})")
                    working_endpoints.append(endpoint)
                else:
                    print(f"‚ö†Ô∏è {endpoint} - {response.status_code}")
            except requests.exceptions.RequestException as e:
                print(f"‚ùå {endpoint} - –û–®–ò–ë–ö–ê: {str(e)[:50]}")

        if working_endpoints:
            self.results["backend"]["status"] = "working"
            self.results["backend"]["details"]["endpoints"] = working_endpoints
            print(f"‚úÖ Backend API —Ä–∞–±–æ—Ç–∞–µ—Ç! ({len(working_endpoints)}/{len(endpoints)} endpoints)")
            return True
        else:
            self.results["backend"]["status"] = "error"
            print("‚ùå Backend API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
            return False

    def check_frontend(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Frontend"""
        print("\nüîç –ü–†–û–í–ï–†–ö–ê FRONTEND")
        print("-" * 30)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ Vite dev server
        port_active = self.check_port(5173, "Frontend Dev")
        self.results["ports"]["frontend"] = port_active

        if port_active:
            try:
                response = requests.get(f"{self.frontend_url}", timeout=5)
                if response.status_code == 200:
                    print("‚úÖ Frontend –¥–æ—Å—Ç—É–ø–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                    self.results["frontend"]["status"] = "working"
                    return True
            except:
                pass

        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Ñ–∞–π–ª—ã frontend
        frontend_path = self.project_root / "frontend"
        key_files = ["package.json", "src/main.tsx", "src/App.tsx", "index.html"]

        existing_files = []
        for file in key_files:
            if (frontend_path / file).exists():
                existing_files.append(file)

        if len(existing_files) >= 3:
            print(f"‚úÖ Frontend —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç ({len(existing_files)}/{len(key_files)})")
            self.results["frontend"]["status"] = "files_ready"
            self.results["frontend"]["details"]["files"] = existing_files
        else:
            print(f"‚ùå Frontend —Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ({len(existing_files)}/{len(key_files)})")
            self.results["frontend"]["status"] = "missing_files"

        return len(existing_files) >= 3

    def check_database(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüîç –ü–†–û–í–ï–†–ö–ê –ë–ê–ó –î–ê–ù–ù–´–•")
        print("-" * 30)

        db_files = [
            "uk_commission.db",
            "uk_financial_services.db",
            "backend/sql_app.db",
            "backend/uk_commission_full.db"
        ]

        existing_dbs = []
        for db_file in db_files:
            db_path = self.project_root / db_file
            if db_path.exists():
                size_mb = db_path.stat().st_size / (1024 * 1024)
                print(f"‚úÖ {db_file} - {size_mb:.2f} MB")
                existing_dbs.append(db_file)
            else:
                print(f"‚ùå {db_file} - –ù–ï –ù–ê–ô–î–ï–ù")

        if existing_dbs:
            self.results["database"]["status"] = "available"
            self.results["database"]["details"]["files"] = existing_dbs
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(existing_dbs)} –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö")
        else:
            self.results["database"]["status"] = "missing"
            print("‚ùå –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        return len(existing_dbs) > 0

    def check_project_structure(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
        print("\nüîç –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ü–†–û–ï–ö–¢–ê")
        print("-" * 30)

        essential_components = {
            "backend/main.py": "–û—Å–Ω–æ–≤–Ω–æ–π FastAPI —Å–µ—Ä–≤–µ—Ä",
            "frontend/package.json": "React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            "docker-compose.yml": "Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
            "README.md": "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
            "LAUNCH_UK_FINANCIAL_SERVICES.bat": "–ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫"
        }

        existing_components = []
        for component, description in essential_components.items():
            component_path = self.project_root / component
            if component_path.exists():
                print(f"‚úÖ {component} - {description}")
                existing_components.append(component)
            else:
                print(f"‚ùå {component} - {description} [–û–¢–°–£–¢–°–¢–í–£–ï–¢]")

        structure_score = len(existing_components) / len(essential_components) * 100

        if structure_score >= 80:
            self.results["files"]["status"] = "complete"
            print(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø–æ—Ä—è–¥–∫–µ ({structure_score:.0f}%)")
        else:
            self.results["files"]["status"] = "incomplete"
            print(f"‚ö†Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ–ø–æ–ª–Ω–∞—è ({structure_score:.0f}%)")

        return structure_score >= 80

    def run_full_diagnostics(self):
        """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        print("üöÄ UK FINANCIAL SERVICES - –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´")
        print("=" * 60)
        print(f"–ü—Ä–æ–µ–∫—Ç: {self.project_root}")
        print(f"–í—Ä–µ–º—è: {time.strftime('%Y-%m-%d %H:%M:%S')}")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        checks = [
            ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞", self.check_project_structure),
            ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", self.check_database),
            ("Backend API", self.check_backend_api),
            ("Frontend", self.check_frontend)
        ]

        results_summary = []
        for check_name, check_func in checks:
            try:
                result = check_func()
                results_summary.append((check_name, "‚úÖ OK" if result else "‚ùå –ü–†–û–ë–õ–ï–ú–ê"))
            except Exception as e:
                results_summary.append((check_name, f"‚ùå –û–®–ò–ë–ö–ê: {e}"))

        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 60)
        print("üìã –ò–¢–û–ì–ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
        print("-" * 30)

        for check_name, status in results_summary:
            print(f"{status} {check_name}")

        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        working_checks = sum(1 for _, status in results_summary if "‚úÖ" in status)
        total_checks = len(results_summary)

        print(f"\nüìä –û–ë–©–ò–ô –°–¢–ê–¢–£–°: {working_checks}/{total_checks} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")

        if working_checks >= total_checks * 0.75:
            print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
            overall_status = "ready"
        elif working_checks >= total_checks * 0.5:
            print("‚ö†Ô∏è –†–ï–ó–£–õ–¨–¢–ê–¢: –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ")
            overall_status = "partial"
        else:
            print("‚ùå –†–ï–ó–£–õ–¨–¢–ê–¢: –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
            overall_status = "needs_setup"

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        self.results["overall_status"] = overall_status
        self.results["timestamp"] = time.strftime('%Y-%m-%d %H:%M:%S')

        report_file = self.project_root / "SYSTEM_STATUS_REPORT.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, indent=2, ensure_ascii=False)

        print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")

        return overall_status, working_checks, total_checks

def main():
    """–ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    diagnostics = SystemDiagnostics()
    status, working, total = diagnostics.run_full_diagnostics()
    return status

if __name__ == "__main__":
    main()
