======================================================================
ФИНАЛЬНАЯ ИСПРАВЛЕННАЯ КОНФИГУРАЦИЯ ПРОЕКТА (2025-09-17)
======================================================================

Этот файл содержит итоговые, рабочие версии конфигурационных файлов и команд для запуска проекта "uk-commission-admin-panel" с помощью Docker.


-------------------------------------------------
ФАЙЛ 1: docker-compose.yml (основной файл Docker)
-------------------------------------------------

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: uk-commission-backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: uk-commission-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    restart: unless-stopped
    depends_on:
      - backend


---------------------------------------------------
ФАЙЛ 2: backend/Dockerfile (инструкция для Backend)
---------------------------------------------------

# Используем официальный образ Python
FROM python:3.12-slim

# Устанавливаем переменные окружения
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# Устанавливаем рабочую директорию
WORKDIR /app

# Установка зависимостей
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Копируем исходный код проекта
COPY . .

# Открываем порт
EXPOSE 8000

# КОМАНДА С АБСОЛЮТНЫМ ПУТЕМ:
# /root/.local/bin/ - это стандартный путь, куда pip устанавливает программы
CMD ["/root/.local/bin/gunicorn", "core.wsgi:application", "--bind", "0.0.0.0:8000"]


-----------------------------------------------------
ФАЙЛ 3: frontend/Dockerfile (инструкция для Frontend)
-----------------------------------------------------

# Используем официальный образ Node.js для разработки
FROM node:18-alpine

# Устанавливаем рабочую директорию
WORKDIR /app

# Копируем файлы с зависимостями
COPY package*.json ./

# Устанавливаем зависимости
RUN npm install

# Копируем весь остальной код frontend
COPY . .

# Открываем порт, на котором работает React-приложение
EXPOSE 3000

# КОМАНДА С АБСОЛЮТНЫМ ПУТЕМ:
# /app/node_modules/.bin/ - это стандартный путь для исполняемых файлов npm
CMD ["/app/node_modules/.bin/vite", "--host", "0.0.0.0", "--port", "3000"]


======================================================================
ПРАВИЛЬНЫЕ КОМАНДЫ ДЛЯ ТЕРМИНАЛА
======================================================================

---
КОМАНДА 1: Полная очистка ("Ядерный вариант")
(Используется, если что-то снова сломалось или нужно начать с абсолютно чистого листа)
---

# ШАГ 1.1: Остановить и удалить всё, что связано с проектом
docker-compose down --volumes --rmi all

# ШАГ 1.2: Очистить весь кеш сборок Docker (самый важный шаг)
docker builder prune -a -f


---
КОМАНДА 2: Сборка и запуск проекта
(Используется после полной очистки или если вы внесли изменения в Dockerfile)
---

docker-compose up --build


---
КОМАНДА 3: Обычный запуск проекта
(Используется для повседневного запуска, если ничего не менялось в конфигурации)
---

docker-compose up


---
КОМАНДА 4: Остановка проекта
(Когда закончили работать, в том же терминале, где запускали `docker-compose up`, нажмите...)
---
Ctrl + C
